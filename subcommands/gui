#!/usr/bin/env -S uv run --script

# /// script
# dependencies = [
#    "gradio",
#    "pywebview",
# ]
# ///

import gradio as gr
import subprocess
import os
import webview
from functools import partial


def run_slopify(subcommand, *args):
    process = subprocess.Popen(
        [
            os.path.join(os.path.dirname(__file__), "..", "bin", "slopify"),
            subcommand,
            *args,
        ],  # or any command/script
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1,
        env=dict(os.environ, PYTHONUNBUFFERED="1"),
    )

    lines = ""
    for line in process.stdout:
        print(line, end="")
        lines += line
        yield lines


def jira_ticket(ticket_id, branch, action):
    print(f"jira_ticket({ticket_id}, {branch}, {action})")
    os.environ["SLOPIFY_BRANCH"] = branch
    yield from run_slopify(action, ticket_id)

with gr.Blocks(
    title="Slopify GUI",
    css="footer {display: none !important;}",  # Hides the Gradio footer
) as demo:

    with gr.Tab("Jira ticket"):
        gr.Interface(
                fn=jira_ticket,
            inputs=[
                gr.Textbox(
                    label="Ticket ID (e.g., ABC-123)",
                    placeholder="Enter your ticket ID here",
                ),
                gr.Textbox(
                    label="On to of branch (optional)",
                    placeholder="branch",
                ),
                gr.Radio(
                    label="Step",
                    choices=[
                        ("Refine", "ticket-feedback"),
                        ("Plan", "plan-ticket"),
                        ("Implement", "pick-ticket"),
                    ],
                    value="ticket-feedback",
                ),
            ],
            outputs=gr.Textbox(
                label="Log", lines=18, show_copy_button=True, interactive=False
            ),
            flagging_mode="never",
            submit_btn="Go",
        )

    with gr.Tab("Ask Question"):
        gr.Interface(
            fn=partial(run_slopify, "ask-question"),
            inputs=[
                gr.Textbox(
                    label="Repository",
                    placeholder="name/repo",
                ),
                gr.Textbox(
                    label="Branch",
                    placeholder="branch",
                ),
                gr.Textbox(label="Question", placeholder="Enter your query", lines=5),
            ],
            outputs=gr.Textbox(
                label="Log", lines=18, show_copy_button=True, interactive=False
            ),
            flagging_mode="never",
            submit_btn="Query",
        )

    with gr.Tab("Fix CI"):
        gr.Interface(
            fn=partial(run_slopify, "fix-ci-simple"),
            inputs=[
                gr.Textbox(
                    label="Repository",
                    placeholder="name/repo",
                ),
                gr.Textbox(
                    label="Branch",
                    placeholder="branch",
                ),
            ],
            outputs=gr.Textbox(
                label="Log", lines=18, show_copy_button=True, interactive=False
            ),
            flagging_mode="never",
            submit_btn="Fix CI",
        )
    #
    # with gr.Tab("Apply Feedback"):
    #     gr.Markdown("TODO: Integrate `slopify pick-comment`.")
    #
    # with gr.Tab("Config"):
    #     gr.Markdown("TODO: Implement.")


demo.launch(
    server_name="127.0.0.1", server_port=7869, inbrowser=False, prevent_thread_lock=True
)

webview.create_window("Slopify GUI", "http://127.0.0.1:7869")
webview.start()
