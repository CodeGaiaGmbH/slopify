#!/usr/bin/env siesta
# vim: set ft=jinja


#
# Load config
#
{% set conf = loadini("~/.slopify.ini") %}
#
# Import jira
#
{% set jiralib = import("jira") %}
{% set jira=jiralib.JIRA(server=conf.jira.url, basic_auth=(conf.jira.user, conf.jira.api_token)) %})) }

#
# Check the first argument is a ticket
#
{% set ticket_id=input.split()[0] %}
{% if not ticket_id %}
  {{ error("You must specify a ticket number") }}
{% endif %}
{{ print("Ticket:", ticket_id) }}

#
# Load the ticket
#
{% set ticket=jira.issue(ticket_id) %}

#
# Map ticket labels to Github repo
#
{% set ns = namespace(repo=None) %}
{% for label in ticket.fields.labels %}
  {% set ns.repo = conf.jira_labels.get(label) %}
  {% if ns.repo %}{% break %}{% endif %}
{% endfor %}
{% if not ns.repo %}
  {{ error("Could not find a repo for this ticket, labels: {}".format(ticket.fields.labels)) }}
{% endif %}
{% set repo = ns.repo %}
{{print("Repo:", repo)}}


#
# Make a fresh project clone
#
{% set repo_path|run %}
  mktemp -d /tmp/slopify-{{ticket.fields.summary|slugify|escape}}-XXXXXXXX
{% endset %}
{{ cd(repo_path) }}
{{print("Cloning repo to {} ...".format(repo_path))}}
{% filter run() %}
  set -x
  git clone --depth=1 git@github.com:{{repo|escape}} .
{% endfilter %}

#
# Create a fresh branch
#
{{print("Creating fresh branch...")}}
{% set branch|run %}
  branch_candiate={{ticket.key|escape}}-{{ticket.fields.summary|slugify|escape}}
  if git ls-remote --heads origin "$branch_candiate" | grep -q "$branch_candiate"; then
    echo "$branch_candiate"-"$RANDOM"
  else
    echo "$branch_candiate"
  fi
{% endset %}
{% filter run() %}
  set -x
  git checkout -b {{branch|escape}}
{% endfilter %}

#
# Prompt for list of relevant files
#
{{print("Prompting for relevant files list...")}}
{% set files|dedent|prompt("anthropic/claude-sonnet-4-20250514")|code %}

  # Requested code changes
  ## {{ ticket.fields.summary }}
  {{ ticket.fields.description }}

  # Project files and their tags
  ```
  {% filter run %}
  for file in $(git ls-files | grep -v '/migrations/'); do
    echo -n "$file: "
    ctags -f- "$file" 2>/dev/null | awk '{ print $1 }' | xargs | sed 's/ /, /g'
  done
  {% endfilter %}

  # Task
  List important files that could be relevant to the requested code changes.
  Output a code block where every line is a file. Select at maximum about 5 files.
{% endset %}
{{print("Files for context:", files.splitlines()|join(", "))}}


#
# Prompt for implementation
#
{{print("Prompting for implementation...")}}
{% set changes|prompt("anthropic/claude-sonnet-4-20250514") %}
# Persona
You are a senior developer.

# Implement the following changes
## {{ ticket.fields.summary }}
{{ description }}

# Files for context
{{files|catfiles}}

# Task
Output the whole files you changed or created.
{% endset %}



#
# Apply changes to filesystem
#
{{print("Writing changes to filesystem...")}}
{% set re=import("re") %}
{% set regex="`(.+?)`.*?```[^\\n]*(.+?)```" %}
{% for filename, content in re.findall(regex, changes, re.DOTALL) %}
  {% print(filename, content[:12]) %}
  {{ content|write(filename) }}
{% endfor %}

#
# Commit the changes
#
{{ print("Committing changes...\n") }}
{% filter run %}
  set -x
  git --no-pager diff 1>&2
  git add .
{% endfilter %}

{% set commit|dedent|prompt("gemini/gemini-2.5-pro") %}
  Create a very short commit message based on this diff:
  ```
    {% filter run() %}
      git diff --cached --unified=0 | grep -v '^@'
    {% endfilter %}
  ```
{% endset %}

{% filter run %}
set -x
git commit -m {{ commit.splitlines()[0]|escape }} -m "Co-authored-by: slopify AI <slopify@codegaia.io>"
{% endfilter %}

#
# Commit any eventual changes done by the hook
#
{% set hook_script = conf.hooks[repo] %}
{% if hook_script %}
  {{print("Running hook script...")}}
  {% filter run %}
    set -ex
    {{ hook_script }}
    git add .
    git diff
    git commit \
      -m {{ conf.hooks_commit[repo]|default("Run hook")|escape }} \
      -m "Co-authored-by: slopify AI <slopify@codegaia.io>" \
      --no-verify || true
  {% endfilter %}
{% else %}
  {{print("No hook script found.")}}
{% endif %}


#
# Push
#
{% filter run %}
    git push --set-upstream origin {{branch|escape}} --no-verify
{% endfilter %}

#
# Prompt for PR title
#
{% include "util:create-pr" %}
