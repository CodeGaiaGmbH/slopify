#!/usr/bin/env -S uv run --script
# /// script
# dependencies = [
#    "llm",
#    "llm-anthropic",
#    "jira @ git+https://github.com/pycontribs/jira.git@3.10.1",
# ]
# ///

import llm
import utils
import json


PROMPT_TEMPLATE = """
# Task
Craft a new ticket description with the following headers:
* Summary: A short summary, two short sentences.
* API Changes: Only if applicable. Are there any *HTTP* API changes?
* Model schema changes: Only if applicable. Are there any new, removed or renamed fields or tables?
* File changes: Briefly list files changed and their a one sentence summary of the changes.
* Project conventions, integration and nuisances.
* Notes: Short bullet points, only if necessary

# Persona
You are a senior software developer.

# Project overview
```
{project_map}
```

## Ticket title
{title}

## Ticket description
```
{description}
```

# Notes
- Understand project conventions by reading files.
"""


MD_PROMPT = """
# Task
Convert the following markdown to jira markup.
Ommit any fluff.

# Cheatsheet
*bold*
_italic_
{{code}}
-strike-
+underline+
bq. quote
h1. Big Title  
h2. Medium Title  
h3. Small Title
----  â†’ horizontal rule
* Bullet 1  
** Sub-bullet  
# Numbered 1  
## Sub-numbered
|| Header 1 || Header 2 ||  
| Row 1 Col 1 | Row 1 Col 2 |  
| Row 2 Col 1 | Row 2 Col 2 |
{{inline code}}  
{code[:lang]}code here{code}  
{noformat}raw text{noformat}  
{panel:title=Info}content{panel}

# Input
"""


def md2jira(inp):
    model = llm.get_model(MODEL)
    return model.prompt(MD_PROMPT + inp).text()

# MODEL = "claude-4-sonnet"
MODEL = "claude-sonnet-4.5"
# MODEL = "claude-3.5-haiku"


def main():

    issue = utils.load_and_clone_issue()

    model = llm.get_model(MODEL)

    prompt = PROMPT_TEMPLATE.format(
        project_map=utils.get_project_map(),
        title=issue.fields.summary,
        description=(
            issue.fields.description.strip(" \n") if issue.fields.description else ""
        ),
    )

    conversation = model.conversation()
    response = conversation.chain(
        prompt,
        tools=[utils.readFiles],
    )
    plan = response.text()
    print(plan)

    plan = md2jira(plan)
    print(plan)




    descr = issue.fields.description or ""
    descr += "\n\n"
    descr += plan
    issue.update(description=descr)

    print("All clear!")


if __name__ == "__main__":
    main()
