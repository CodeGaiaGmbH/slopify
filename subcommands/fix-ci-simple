#!/usr/bin/env siesta
# vim: set ft=jinja


{% set repo=input.split()[1] %}
{% set branch=input.split()[2] %}

#
# Make a fresh project clone
#
{% set repo_path|run %}
mktemp -d /tmp/slopify-XXXXXXX
{% endset %}
{{ cd(repo_path) }}
{{print("Cloning repo to {} ...".format(repo_path))}}
{% filter run %}
set -x
git clone git@github.com:{{repo|escape}} .
{% endfilter %}

#
# Checking out branch
#
{{print("Checking out branch {} ...".format(branch))}}
{% filter run %}
set -x
git fetch
git checkout {{branch|escape}}
{% endfilter %}


###
{{ print("Retrieving error log...") }}
###
{% set error_log|run %}
  job="$(gh run list --branch {{branch|escape}} --limit 1 --jq ".[0].databaseId" --json databaseId)"
  gh run view "$job" --log-failed
{% endset %}
{% if error_log %}
  {{ print(error_log) }}
{% else %}
  {{ error("No CI errors") }}
{% endif %}

###
{{ print("Prompting for file with error...") }}
###
{% set file_with_error|dedent|prompt("gemini/gemini-2.5-pro")|code %}
  Print the full path of the file containing the error as code block.

  ```
  {{ error_log }}
  ```
{% endset %}
{{ print("File:", file_with_error) }}


#
# Normalize file
#
{{ print("Normalizing file path...") }}
{% set path=import('os').path %}
{% set ns=namespace(candiate=None) %}
{% for i in range(file_with_error.count(path.sep) + 1) %}
  {% set ns.candiate=path.sep.join(file_with_error.split(path.sep)[i:]).lstrip(path.sep) %}
  {% if path.exists(ns.candiate) %}
    {% break %}
  {% endif %}
{% endfor %}
{% set file_with_error=ns.candiate %}
{{ print("Normalized file:", file_with_error) }}


###
{{ print("Prompting for fixed file contents...") }}
###
{% set fixed_file_contents|dedent|prompt("gemini/gemini-2.5-pro")|code %}
  # Task
  Fix the error. Print the full fixed file content.

  ## Error log
  ```
  {{ error_log }}
  ```

  ## File
  ```
  {{ file_with_error|read }}
  ```
{% endset %}


###
{{ print("Writing the fix to", file_with_error, "...") }}
###
{{ fixed_file_contents|write(file_with_error) }}


#
# Commit the changes
#
{{ print("Committing changes...\n") }}
{% filter run %}
  set -x
  git --no-pager diff 1>&2
  git add .
{% endfilter %}
{% set commit|dedent|prompt("gemini/gemini-2.5-pro") %}
  Create a very short commit message based on this diff:
  ```
    {% filter run() %}
      git diff --cached --unified=0 | grep -v '^@'
    {% endfilter %}
  ```
{% endset %}
{% filter run %}
set -x
git commit -m {{ commit.splitlines()[0]|escape }}
{% endfilter %}

#
# Push changes
#
{{print("Pushing changes...")}}
{% filter run %}
set -x
git push
{% endfilter %}

{{print("Done.")}}
